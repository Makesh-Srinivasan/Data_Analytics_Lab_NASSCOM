knitr::opts_chunk$set(echo = TRUE)
data=read.csv("soya_oil data set for TS forecast.csv")
data=ts(data$Dollar,start=c(1990,1),frequency=4)
View(data)
knitr::opts_chunk$set(echo = TRUE)
combined_groups <- read.csv("One way Anova_Football.csv")
combined_groups
summary(combined_groups)
strboxplot(combined_groups,ylab="Score",xlab="Teams/clubs",col="#984447")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
combined_groups <- read.csv("onewayanova_machine.csv")
combined_groups
summary(combined_groups)
strboxplot(combined_groups,ylab="Diameter",xlab="Machines",col="orange")
strboxplot(combined_groups,ylab="Diameter",xlab="Machines",col="orange")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
combined_groups <- read.csv("onewayanova_machine.csv")
combined_groups
summary(combined_groups)
boxplot(combined_groups,ylab="Diameter",xlab="Machines",col="orange")
stacked_groups <- stack(combined_groups)
stacked_groups
names(stacked_groups) <- c("Diameter","Machines")
stacked_groups
anova_results <- aov(Diameter~Machines,data=stacked_groups)
summary(anova_results)
tk <- TukeyHSD(anova_results)
tk
plot(tk,col="blue")
combined_groups <- read.csv("One way Anova_Football.csv")
combined_groups
summary(combined_groups)
boxplot(combined_groups,ylab="Score",xlab="Teams/clubs",col="#984447")
stacked_groups <- stack(combined_groups)
stacked_groups
names(stacked_groups) <- c("Score","Clubs")
stacked_groups
anova_results <- aov(Score~Clubs,data=stacked_groups)
summary(anova_results)
tk <- TukeyHSD(anova_results)
tk
plot(tk,col="blue")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(ggplot2)
rm(list=ls())
mydata <- read.csv('admission.csv',header=T)
str(mydata)
head(mydata)
summary(mydata)
hist(mydata$admit,col='blue')
mydata$admit <- as.factor(mydata$admit)
summary(mydata)
train_ind=createDataPartition(mydata$admit,p=0.80,list=F)
train_ds=mydata[train_ind,]
test_ds=mydata[-train_ind,]
my_model=glm(admit~.,data=train_ds,family = "binomial")
summary(my_model)
pred_train=predict(my_model,train_ds,type="response")
pred_train
pred_train=ifelse(pred_train>0.5,1,0)
conf <- table(Predicted=pred_train,Actual=train_ds$admit)
conf
1-sum(diag(tabl))/sum(tabl)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(ggplot2)
rm(list=ls())
mydata <- read.csv('admission.csv',header=T)
str(mydata)
head(mydata)
summary(mydata)
hist(mydata$admit,col='blue')
mydata$admit <- as.factor(mydata$admit)
summary(mydata)
train_ind=createDataPartition(mydata$admit,p=0.80,list=F)
train_ds=mydata[train_ind,]
test_ds=mydata[-train_ind,]
my_model=glm(admit~.,data=train_ds,family = "binomial")
summary(my_model)
pred_train=predict(my_model,train_ds,type="response")
pred_train
pred_train=ifelse(pred_train>0.5,1,0)
conf <- table(Predicted=pred_train,Actual=train_ds$admit)
conf
1-sum(diag(conf))/sum(conf)
pred_test <- predict(my_model, test_ds, type = 'response')
pred_test <- ifelse(pred_test>0.5, 1, 0)
tab2 <- table(Predicted = pred_test, Actual = test_ds$admit)
tab2
1 - sum(diag(tab2))/sum(tab2)
knitr::opts_chunk$set(echo = TRUE)
library(factoextra)
library(cluster)
df <- USArrests
df<-na.omit(df)
df<-scale(df) # Normalise the dataset
head(df)
fviz_nbclust(df,kmeans,method="wss")
set.seed(1) #to reproduce same results always
km <- kmeans(df, centers = 4, nstart = 25)
km
fviz_cluster(km, data=df)
final_data<-cbind(USArrests,cluster=km$cluster)
head(final_data)
df <- read.csv("seeds_K Means.csv")
df<-na.omit(df)
df<-scale(df) # Normalise the dataset
head(df)
fviz_nbclust(df,kmeans,method="wss")
set.seed(1) #to reproduce same results always
km <- kmeans(df, centers = 4, nstart = 25)
km
fviz_cluster(km, data=df)
final_data<-cbind(df,cluster=km$cluster)
head(final_data)
knitr::opts_chunk$set(echo = TRUE)
library(factoextra)
library(cluster)
df <- USArrests
df<-na.omit(df)
df<-scale(df) # Normalise the dataset
head(df)
fviz_nbclust(df,pam,method="wss")
set.seed(1) #to reproduce same results always
km <- pam(df,k=4)
km
fviz_cluster(km, data=df)
final_data<-cbind(USArrests,cluster=km$cluster)
head(final_data)
df <- read.csv("autos.csv")
df<-na.omit(df)
df<-scale(df) # Normalise the dataset
