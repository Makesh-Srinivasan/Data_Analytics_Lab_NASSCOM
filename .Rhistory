rownames(edges)<-rown[["media"]]
adj<-data.matrix(edges)
graph<-graph_from_incidence_matrix(adj)
E(graph)
V(graph)
links
##### This can also be printed as a heatmap as shown below
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
##### This can be printed as a matrix as shown below:
E(graph)
V(graph)
links
##### This can also be printed as a heatmap as shown below
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
##### This can be printed as a matrix as shown below:
E(net)
V(net)
links
##### This can also be printed as a heatmap as shown below
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
##### This can be printed as a matrix as shown below:
E(net2)
V(net2)
links
##### This can also be printed as a heatmap as shown below
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
##### This can be printed as a matrix as shown below:
E(net)
V(net)
links
##### This can also be printed as a heatmap as shown below
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
as.directed(graph, mode = c("arbitrary"))
as.directed(graph, mode = c("arbitrary"))
plot(graph)
# The 5 are in places of nodes where the edge connects 2 leap years. Else 1
graph <- set_edge_attr(graph,"weight",value = c("5","1","5","1","5","1","5","1","5","1","5","1","5","1","1","1","5","1","1","1","5","5","1","1","5","1","1","5","5","1","1"))
plot(graph)
get.edge.attribute(graph)
# The 5 are in places of nodes where the edge connects 2 leap years. Else 1
graph <- set_edge_attr(graph,index = E(graph) ,value = c("5","1","5","1","5","1","5","1","5","1","5","1","5","1","1","1","5","1","1","1","5","5","1","1","5","1","1","5","5","1","1"))
# The 5 are in places of nodes where the edge connects 2 leap years. Else 1
graph <- set_edge_attr(graph,"weight",index = E(graph) ,value = c("5","1","5","1","5","1","5","1","5","1","5","1","5","1","1","1","5","1","1","1","5","5","1","1","5","1","1","5","5","1","1"))
plot(graph)
get.edge.attribute(graph)
graph <- set_vertex_attr(graph,"type",value = c(2000:2029))
plot(graph, vertex.label.dist=1,vertex.size=7, vertex.label = c(2000:2029))
vertex_attr(graph)
# The 5 are in places of nodes where the edge connects 2 leap years. Else 1
graph <- set_edge_attr(graph,"weight","type",index = E(graph) ,value = c("5","1","5","1","5","1","5","1","5","1","5","1","5","1","1","1","5","1","1","1","5","5","1","1","5","1","1","5","5","1","1"))
# The 5 are in places of nodes where the edge connects 2 leap years. Else 1
graph <- set_edge_attr(graph,"weight",index = E(graph) ,value = c("5","1","5","1","5","1","5","1","5","1","5","1","5","1","1","1","5","1","1","1","5","5","1","1","5","1","1","5","5","1","1"))
plot(graph)
get.edge.attribute(graph)
as.directed(graph, mode = c("mutual"))
plot(graph)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("igraph")
library(igraph) # load the library
nodes <- read.csv("Dataset2-Media-User-Example-NODES.csv") #nodes
head(nodes)
edges <- read.csv("Dataset2-Media-User-Example-EDGES.csv") #links
edges <- subset(edges, select = -c(X))
head(edges)
# The plots contain all the customisations too. But to see them individually, see the following chunk of code
net2 <- graph_from_incidence_matrix(edges)
table(V(net2)$type)
net2.bp <- bipartite.projection(net2)
as_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2))
t(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2)
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=1,vertex.size=7, vertex.label=nodes$media[!is.na(nodes$media.type)])
plot(net2.bp$proj2, vertex.label.color="black", vertex.label.dist=1,vertex.size=7, vertex.label=nodes$media[ is.na(nodes$media.type)])
# Individual customisations
#####edge
#colour
plot(net, edge.color="red")
#size
plot(net, edge.arrow.size=10)
#####vertex
#colour
plot(net, vertex.color="green")
#size
plot(net, vertex.size = 10)
#vector frame
plot(net, frame =TRUE, vertex.frame.color = "orange")
#label
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=1,vertex.size=7, vertex.label=nodes$media[!is.na(nodes$media.type)])
##### This can be printed as a matrix as shown below:
E(net)
V(net)
links
##### This can also be printed as a heatmap as shown below
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
print(paste("count of edges = ", gsize(graph)))
print(paste("count of vertices = ", gorder(graph)))
adjacent_vertices(graph, V(graph), mode = "out")
adjacent_vertices(graph, V(graph), mode = "in")
adjacent_vertices(graph, V(graph), mode = "all")
adjacent_vertices(graph, V(graph), mode = "total")
# The degree for the paths:
degree(graph, v = V(graph), mode = c("all", "out", "in", "total"))
# Maximum degree
V(graph)$name[degree(graph)==max(degree(graph))]
#Minimum degree
V(graph)$name[degree(graph)==min(degree(graph))]
graph <- set_vertex_attr(graph,"profit",value = c("+", "-", "+", "-", "+", "-", "+", "-", "+"))
plot(graph, vertex.label.dist=1,vertex.size=7, vertex.label = c("+", "-", "+", "-", "+", "-", "+", "-", "+"))
vertex_attr(graph)
graph <- set_vertex_attr(graph,"type",value = c(2000:2029))
plot(graph, vertex.label.dist=1,vertex.size=7, vertex.label = c(2000:2029))
vertex_attr(graph)
# The 5 are in places of nodes where the edge connects 2 leap years. Else 1
graph <- set_edge_attr(graph,"weight",index = E(graph) ,value = c("5","1","5","1","5","1","5","1","5","1","5","1","5","1","1","1","5","1","1","1","5","5","1","1","5","1","1","5","5","1","1"))
plot(graph)
get.edge.attribute(graph)
as.directed(graph, mode = c("arbitrary"))
plot(graph)
as.directed(graph, mode = c("mutual"))
plot(graph)
print(get.adjacency(graph))
print(degree(graph,mode="in"))
print(degree(graph,mode="out"))
##### This can be printed as a matrix as shown below:
E(net)
V(net)
edges
##### This can also be printed as a heatmap as shown below (I used weights from a different dataset)
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
# The 5 are in places of nodes where the edge connects 2 leap years. Else 1
graph <- set_edge_attr(graph,"weight",index = E(graph) ,value = c("5","1","1","1","5","1","1","1","5","1","1","1","5","1","1","1","5","1","1","1","5","1","1","1","5","1","1","5","1","1","1"))
plot(graph)
get.edge.attribute(graph)
#print(get.adjacency(graph))
as_adjacency_matrix(net2, type = c("both"),edges = FALSE,
names = TRUE,
sparse = igraph_opt("sparsematrices")
)
print(get.adjacency(graph))
print(get.adjacency(net))
print(get.adjacency(graph))
knitr::opts_chunk$set(echo = TRUE)
# install.packages("igraph")
library(igraph) # load the library
nodes <- read.csv("Dataset2-Media-User-Example-NODES.csv") #nodes
head(nodes)
edges <- read.csv("Dataset2-Media-User-Example-EDGES.csv") #links
edges <- subset(edges, select = -c(X))
head(edges)
# The plots contain all the customisations too. But to see them individually, see the following chunk of code
net2 <- graph_from_incidence_matrix(edges)
table(V(net2)$type)
net2.bp <- bipartite.projection(net2)
as_incidence_matrix(net2)  %*% t(as_incidence_matrix(net2))
t(as_incidence_matrix(net2)) %*%   as_incidence_matrix(net2)
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=1,vertex.size=7, vertex.label=nodes$media[!is.na(nodes$media.type)])
plot(net2.bp$proj2, vertex.label.color="black", vertex.label.dist=1,vertex.size=7, vertex.label=nodes$media[ is.na(nodes$media.type)])
# Individual customisations
#####edge
#colour
plot(net, edge.color="red")
#size
plot(net, edge.arrow.size=10)
#####vertex
#colour
plot(net, vertex.color="green")
#size
plot(net, vertex.size = 10)
#vector frame
plot(net, frame =TRUE, vertex.frame.color = "orange")
#label
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=1,vertex.size=7, vertex.label=nodes$media[!is.na(nodes$media.type)])
##### This can be printed as a matrix as shown below:
E(net)
V(net)
edges
##### This can also be printed as a heatmap as shown below (I used weights from a different dataset)
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
print(paste("count of edges = ", gsize(graph)))
print(paste("count of vertices = ", gorder(graph)))
adjacent_vertices(graph, V(graph), mode = "out")
adjacent_vertices(graph, V(graph), mode = "in")
adjacent_vertices(graph, V(graph), mode = "all")
adjacent_vertices(graph, V(graph), mode = "total")
# The degree for the paths:
degree(graph, v = V(graph), mode = c("all", "out", "in", "total"))
# Maximum degree
V(graph)$name[degree(graph)==max(degree(graph))]
#Minimum degree
V(graph)$name[degree(graph)==min(degree(graph))]
graph <- set_vertex_attr(graph,"profit",value = c("+", "-", "+", "-", "+", "-", "+", "-", "+"))
plot(graph, vertex.label.dist=1,vertex.size=7, vertex.label = c("+", "-", "+", "-", "+", "-", "+", "-", "+"))
vertex_attr(graph)
graph <- set_vertex_attr(graph,"type",value = c(2000:2029))
plot(graph, vertex.label.dist=1,vertex.size=7, vertex.label = c(2000:2029))
vertex_attr(graph)
# The 5 are in places of nodes where the edge connects 2 leap years. Else 1
graph <- set_edge_attr(graph,"weight",index = E(graph) ,value = c("5","1","1","1","5","1","1","1","5","1","1","1","5","1","1","1","5","1","1","1","5","1","1","1","5","1","1","5","1","1","1"))
plot(graph)
get.edge.attribute(graph)
as.directed(graph, mode = c("arbitrary"))
plot(graph)
as.directed(graph, mode = c("mutual"))
plot(graph)
print(get.adjacency(graph))
print(degree(graph,mode="in"))
print(degree(graph,mode="out"))
# Individual customisations
#####edge
#colour
plot(net2.bp$proj2, edge.color="red")
#size
plot(net2.bp$proj2, edge.arrow.size=10)
#####vertex
#colour
plot(net2.bp$proj2, vertex.color="green")
#size
plot(net2.bp$proj2, vertex.size = 10)
#vector frame
plot(net2.bp$proj2, frame =TRUE, vertex.frame.color = "orange")
#label
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=1,vertex.size=7, vertex.label=nodes$media[!is.na(nodes$media.type)])
##### This can be printed as a matrix as shown below:
E(net2)
V(net2)
edges
##### This can also be printed as a heatmap as shown below (I used weights from a different dataset)
n <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
l <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
l <- aggregate(l[,3], l[,-3], sum)
l <- l[order(l$from, l$to),]
colnames(l)[4] <- "weight"
rownames(l) <- NULL
net <- graph_from_data_frame(d=l, vertices=n, directed=T)
class(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(100), scale="none", margins=c(10,10) )
x <- gsize(net2)
y <- gorder(net2)
print(paste("count of edges = ", x))
print(paste("count of vertices = ", y))
#load data
df <- USArrests
library(factoextra)
library(cluster)
#load data
df <- USArrests
#remove rows with missing values
df <- na.omit(df)
#scale each variable to have a mean of 0 and sd of 1
df <- scale(df)
#view first six rows of dataset
head(df)
fviz_nbclust(df, pam, method = "wss")
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(df,
FUN = pam,
K.max = 10, #max clusters to consider
B = 50) #total bootstrapped iterations
#make this example reproducible
set.seed(1)
#perform k-medoids clustering with k = 4 clusters
kmed <- pam(df, k = 4)
#view results
kmed
fviz_cluster(kmed, data = df)
#add cluster assignment to original data
final_data <- cbind(USArrests, cluster = kmed$cluster)
#view final data
head(final_data)
rm(list=ls())
library(factoextra)
library(cluster)
#loading data-------------------
df <- USArrests
df<-na.omit(df)
df<-scale(df) #this is to normalize the values in data because the range of values is not distributed evenly
head(df)
#determine optimal number of clusters=K----------
#plot number of clusters vs total within sum of squares
fviz_nbclust(df,kmeans,method="wss") #we see that after scaling, we get a bend at k=4 so that is the optimal number of clusters
set.seed(1) #to reproduce same results always
km <- kmeans(df,centers = 4,nstart = 25)
km
#plot results of final k-means model
fviz_cluster(km,data=df)
#add cluster assignment to original data
final_data<-cbind(USArrests,cluster=km$cluster)
#view final data
head(final_data)
rm(list=ls())
#setwd("C:/Files/Academics/VIT/Lab/EDA/19BCE1560/Lab7")
library(factoextra)
library(cluster)
#loading data-------------------
df <- USArrests
df<-na.omit(df)
df<-scale(df) #this is to normalize the values in data because the range of values is not distributed evenly
head(df)
#determine optimal number of clusters=K----------
#plot number of clusters vs total within sum of squares
fviz_nbclust(df,pam,method="wss") #we see that after scaling, we get a bend at k=4 so that is the optimal number of clusters
#Perform k-means clustering with optimal number of k----------
set.seed(1) #to reproduce same results always
km <- pam(df,centers = 4,nstart = 25)
km
#plot results of final k-means model
fviz_cluster(km,data=df)
#add cluster assignment to original data
final_data<-cbind(USArrests,cluster=km$cluster)
#view final data
head(final_data)
library(cluster)
#loading data-------------------
df <- USArrests
df<-na.omit(df)
df<-scale(df) #this is to normalize the values in data because the range of values is not distributed evenly
head(df)
#determine optimal number of clusters=K----------
#plot number of clusters vs total within sum of squares
fviz_nbclust(df,pam,method="wss") #we see that after scaling, we get a bend at k=4 so that is the optimal number of clusters
set.seed(1) #to reproduce same results always
km <- pam(df,centers = 4,nstart = 25)
km <- pam(df,centers = 4)
km <- pam(df,k=4)
km
#plot results of final k-means model
fviz_cluster(km,data=df)
#add cluster assignment to original data
final_data<-cbind(USArrests,cluster=km$cluster)
#view final data
head(final_data)
#autos_K-Means.csv
rm(list=ls())
library(factoextra)
library(cluster)
df <- read.csv("autos_K-Means.csv")
df <- read.csv("autos_K-Means.csv")
df <- read.csv("autos_K-Means.csv")
df <- read.csv("autos.csv")
#autos_K-Means.csv
rm(list=ls())
library(factoextra)
library(cluster)
df <- read.csv("autos.csv")
df <- read.csv("autos.csv")
print(getwd())
print(getwd(/Users/srinivasanperumal/Desktop))
print(getwd("/Users/srinivasanperumal/Desktop"))
setwd("/Users/srinivasanperumal/Desktop")
setwd("/Users/srinivasanperumal/Desktop/Sixth\ semester/EDA/Lab")
print(getwd())
library(factoextra)
library(cluster)
df <- read.csv("autos.csv")
df<-na.omit(df)
df<-scale(df)
df <- df.subset(data=df, c(price,length))
df <- subset(data=df, c(price,length))
df <- subset(df, c(price,length))
df <- subset(df, select = c(price,length))
df<-scale(df)
head(df)
fviz_nbclust(df,pam,method="wss")
set.seed(1)
km <- pam(df,k=4)
km
fviz_cluster(km,data=df)
#autos_K-Means.csv
rm(list=ls())
setwd("/Users/srinivasanperumal/Desktop/Sixth\ semester/EDA/Lab")
print(getwd())
library(factoextra)
library(cluster)
df <- read.csv("autos.csv")
df<-na.omit(df)
df <- subset(df, select = c(length,price))
df<-scale(df)
head(df)
fviz_nbclust(df,pam,method="wss")
set.seed(1)
km <- pam(df,k=4)
km
fviz_cluster(km,data=df)
final_data<-cbind(USArrests,cluster=km$cluster)
final_data<-cbind(df,cluster=km$cluster)
head(final_data)
